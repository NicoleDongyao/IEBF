// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bin
arma::mat bin(arma::mat img, double s);
RcppExport SEXP _IEBF_bin(SEXP imgSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(bin(img, s));
    return rcpp_result_gen;
END_RCPP
}
// thin
arma::mat thin(arma::mat img, int flag);
RcppExport SEXP _IEBF_thin(SEXP imgSEXP, SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type flag(flagSEXP);
    rcpp_result_gen = Rcpp::wrap(thin(img, flag));
    return rcpp_result_gen;
END_RCPP
}
// field_esti
arma::mat field_esti(arma::mat img, int w);
RcppExport SEXP _IEBF_field_esti(SEXP imgSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(field_esti(img, w));
    return rcpp_result_gen;
END_RCPP
}
// minutiae_set
arma::mat minutiae_set(arma::mat img);
RcppExport SEXP _IEBF_minutiae_set(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(minutiae_set(img));
    return rcpp_result_gen;
END_RCPP
}
// simi_score
double simi_score(arma::mat i1, arma::mat i2, int r0, int theta0);
RcppExport SEXP _IEBF_simi_score(SEXP i1SEXP, SEXP i2SEXP, SEXP r0SEXP, SEXP theta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type i2(i2SEXP);
    Rcpp::traits::input_parameter< int >::type r0(r0SEXP);
    Rcpp::traits::input_parameter< int >::type theta0(theta0SEXP);
    rcpp_result_gen = Rcpp::wrap(simi_score(i1, i2, r0, theta0));
    return rcpp_result_gen;
END_RCPP
}
// gabor
arma::mat gabor(arma::mat img, int w, int s, int gsize, double f, int vx, int vy);
RcppExport SEXP _IEBF_gabor(SEXP imgSEXP, SEXP wSEXP, SEXP sSEXP, SEXP gsizeSEXP, SEXP fSEXP, SEXP vxSEXP, SEXP vySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type gsize(gsizeSEXP);
    Rcpp::traits::input_parameter< double >::type f(fSEXP);
    Rcpp::traits::input_parameter< int >::type vx(vxSEXP);
    Rcpp::traits::input_parameter< int >::type vy(vySEXP);
    rcpp_result_gen = Rcpp::wrap(gabor(img, w, s, gsize, f, vx, vy));
    return rcpp_result_gen;
END_RCPP
}
// laplace
arma::mat laplace(arma::mat img, double alpha);
RcppExport SEXP _IEBF_laplace(SEXP imgSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(laplace(img, alpha));
    return rcpp_result_gen;
END_RCPP
}
// nlm
arma::mat nlm(arma::mat img, int N, int K, double sigma);
RcppExport SEXP _IEBF_nlm(SEXP imgSEXP, SEXP NSEXP, SEXP KSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(nlm(img, N, K, sigma));
    return rcpp_result_gen;
END_RCPP
}
// normal
arma::mat normal(arma::mat img, double m, double var);
RcppExport SEXP _IEBF_normal(SEXP imgSEXP, SEXP mSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(normal(img, m, var));
    return rcpp_result_gen;
END_RCPP
}
// volterra
arma::mat volterra(arma::mat img, double c1, double c2, double c3, double c4, double c5, double rho);
RcppExport SEXP _IEBF_volterra(SEXP imgSEXP, SEXP c1SEXP, SEXP c2SEXP, SEXP c3SEXP, SEXP c4SEXP, SEXP c5SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< double >::type c2(c2SEXP);
    Rcpp::traits::input_parameter< double >::type c3(c3SEXP);
    Rcpp::traits::input_parameter< double >::type c4(c4SEXP);
    Rcpp::traits::input_parameter< double >::type c5(c5SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(volterra(img, c1, c2, c3, c4, c5, rho));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IEBF_bin", (DL_FUNC) &_IEBF_bin, 2},
    {"_IEBF_thin", (DL_FUNC) &_IEBF_thin, 2},
    {"_IEBF_field_esti", (DL_FUNC) &_IEBF_field_esti, 2},
    {"_IEBF_minutiae_set", (DL_FUNC) &_IEBF_minutiae_set, 1},
    {"_IEBF_simi_score", (DL_FUNC) &_IEBF_simi_score, 4},
    {"_IEBF_gabor", (DL_FUNC) &_IEBF_gabor, 7},
    {"_IEBF_laplace", (DL_FUNC) &_IEBF_laplace, 2},
    {"_IEBF_nlm", (DL_FUNC) &_IEBF_nlm, 4},
    {"_IEBF_normal", (DL_FUNC) &_IEBF_normal, 3},
    {"_IEBF_volterra", (DL_FUNC) &_IEBF_volterra, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_IEBF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
